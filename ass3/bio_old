#!/usr/bin/python3
# COMP3311 20T3 Ass3 ... get Name's biography/filmography

import sys
import psycopg2
import re
#from helpers import whatever, functions, you, need

# define any local helper functions here
def convert_to_uupercase(m):
    #"""Convert the second group to uppercase and join both group 1 & group 2"""
    return m.group(1) + m.group(2).upper()

# check if number
def is_number(s):
    try:
        int(s)
        #print(s)
        return True
    except ValueError:
        return False
# helper to conver set of tuples into dictionary
def Convert(tup, di):
    di = dict(tup)
    return di

# find number of people with that name
def Count_people(cur,name,yearw):
    q1 = "select count(name) from names where name ~* %s"
    q2 = "select count(name) from names where name ~* %s and birth_year = %s"
    if yearw == 0:
        #print(cur.mogrify(q, [movie_title]))
        cur.execute(q1, [name]) # why do you need the array [] ??
        res = cur.fetchone()
        if res is None:
            print(f"No name matching '{name}'")
            exit(1)
        return res
    if yearw != 0:
        #print(cur.mogrify(q, [movie_title]))
        cur.execute(q2, [name,yearw]) # why do you need the array [] ??
        res = cur.fetchone()
        if res is None:
            print(f"No name matching '{name}'")
            exit(1)
        return res

# set up some globals
# set up some globals

usage = "Usage: bio 'NamePattern' [Year]"
db = None
cur = None
name = None
yearw = 0;
# process command-line args
argc = len(sys.argv)
if argc == 1:
    print(usage)
    exit(1)
elif argc == 2:
    name = sys.argv[1]
elif argc > 2:
    name = sys.argv[1]
    num = is_number(sys.argv[2])
    if num == False:
        print(usage)
        exit(1)
    else:
        yearw = sys.argv[2]

# manipulate database
# using the view created in the xtras.sql file

# if partial movie_title
    # if year not given
qry1_ny = """
select name, birth_year, death_year from names
where name ~* %s
order by name, birth_year, id;
"""
    # if year given
qry1_y = """
select name, birth_year, death_year from names
where name ~* %s and birth_year = %s
order by name, birth_year, id
"""

# non partial name with out year
qry2_ny = """
select * from Q4_pt1
where name ~* %s
order by start_year, title, ordering, ascii(role_played);
 """
# non-partial name with year
qry2_y = """
select * from Q4_pt1
where name ~* %s  and birth_year = %s
order by start_year, title, ordering, ascii(role_played);
 """

# count of no. of ways a person has been involved in a movie -- built from the Q4_pt view ..

#year given
qry_count_y = """
select title , count(title)
from Q4_pt1
where name ~* %s and birth_year = %s
group by title, start_year
order by start_year;
"""
#no year
qry_count_ny = """
select title , count(title)
from Q4_pt1
where name ~* %s
group by title, start_year
order by start_year;
"""


# get all the distinct crew roles -- (assuming number of crew roles are small ...)
qry_cr = """
select distinct role from crew_roles;
"""

try:
    db = psycopg2.connect("dbname=imdb")
    cur = db.cursor()
    # get crew role list ...
    cur.execute(qry_cr)
    cr = cur.fetchall()
    # convert list of tupls in to a list of strings ...
    crew_list = [item for t in cr for item in t]
    for t in crew_list:
        a_string = t
        t = a_string.replace('"', "")
    #print("===============")
    #print(crew_list)
    #print("===============")
    count = Count_people(cur,name,yearw)
    if count[0] == 0:
       if yearw == 0:
            print(f"No name matching \'{name}\'")
            exit(1)
       if yearw != 0:
            print(f"No name matching \'{name}\' {yearw}")
            exit(1)
    elif count[0] == 1:
        if yearw == 0:
            #case with exact name but not year

            # make hash of , count of no. of ways a person has been involved in a movie
            cur.execute(qry_count_ny, [name])
            tups = cur.fetchall()
            dictionary = {}
            dictionary = Convert(tups, dictionary)
            # get starting tuple for output
            cur.execute(qry1_ny, [name])
            names = cur.fetchone()
            name, birth_year, death_year = names
            #Filmography for Kyle MacLachlan (1959-)
            if death_year is None and  birth_year is not None:
                print(f"Filmography for {name} ({birth_year}-)")
                print("===============")
            if death_year is None and  birth_year is None:
                print(f"Filmography for {name} (???)")
                print("===============")
            if death_year is not None and  birth_year is not None:
                print(f"Filmography for {name} ({birth_year}-{death_year})")
                print("===============")
            if death_year is not None and  birth_year is None:
                print(f"Filmography for {name} (-{death_year})")
                print("===============")
           # print("Here here here here here ")

           # start the output process
            cur.execute(qry2_ny, [name])
            big_list = cur.fetchall()
            bl_len = len(big_list)
            bl_iterator = 0
            while bl_iterator < bl_len:
                title,start_year, movie_id, ordering, name_id, name, birth_year, role_played = big_list[bl_iterator]
                x = dictionary[title]
                #print(f"{title} - {x}")
                #x += 1
                start = 0
                i = 0
                while i < x:
                    if start == 0:
                        # print the just the movie name
                        title,start_year, movie_id, ordering, name_id, name, birth_year, role_played = big_list[bl_iterator] # cehck if you need to keep redecalreing these variables ...
                        print(f"{title} ({start_year})")
                        start = 1
                        continue
                    title,start_year, movie_id, ordering, name_id, name, birth_year, role_played = big_list[bl_iterator]
                    if role_played not in crew_list:
                        # then its a crew role and we print accordingly
                        #role_played = re.sub("(^|\s)(\S)", convert_to_uupercase, role_played)
                        #role_played = role_played.capitalize()
                        print(f" playing {role_played}")
                    if role_played  in crew_list:
                        # then its  acting role and we print accordingly
                        role_played = role_played.capitalize()
                        role_played = re.sub('_', ' ', role_played)
                        print(f" as {role_played}")
                    i += 1
                    bl_iterator += 1
        elif yearw != 0:
            # case of year is given

            # make hash of , count of no. of ways a person has been involved in a movie
            cur.execute(qry_count_y, [name, yearw])
            tups = cur.fetchall()
            dictionary = {}
            dictionary = Convert(tups, dictionary)
            # get starting tuple for output
            cur.execute(qry1_y, [name, yearw])
            names = cur.fetchone()
            name, birth_year, death_year = names
            #Filmography for Kyle MacLachlan (1959-)
            if death_year is None and  birth_year is not None:
                print(f"Filmography for {name} ({birth_year}-)")
                print("===============")
            if death_year is None and  birth_year is None:
                print(f"Filmography for {name} (???)")
                print("===============")
            if death_year is not None and  birth_year is not None:
                print(f"Filmography for {name} ({birth_year}-{death_year})")
                print("===============")
            if death_year is not None and  birth_year is None:
                print(f"Filmography for {name} (-{death_year})")
                print("===============")
           # print("Here here here here here ")

           # start the output process
            cur.execute(qry2_y, [name, yearw])
            big_list = cur.fetchall()
            bl_len = len(big_list)
            bl_iterator = 0
            while bl_iterator < bl_len:
                title,start_year, movie_id, ordering, name_id, name, birth_year, role_played = big_list[bl_iterator]
                x = dictionary[title]
                #print(f"{title} - {x}")
                #x += 1
                start = 0
                i = 0
                while i < x:
                    if start == 0:
                        # print the just the movie name
                        title,start_year, movie_id, ordering, name_id, name, birth_year, role_played = big_list[bl_iterator] # cehck if you need to keep redecalreing these variables ...
                        print(f"{title} ({start_year})")
                        start = 1
                        continue
                    title,start_year, movie_id, ordering, name_id, name, birth_year, role_played= big_list[bl_iterator]
                    if role_played not in crew_list:
                        # then its a crew role and we print accordingly
                        #role_played = role_played.capitalize()
                        print(f" playing {role_played}")
                    if role_played  in crew_list:
                        # then its  acting role and we print accordingly
                        role_played = role_played.capitalize()
                        role_played = re.sub('_', ' ', role_played)
                        print(f" as {role_played}")
                    i += 1
                    bl_iterator += 1
    elif count[0] > 1:
        if yearw == 0:
            print(f"Names matching '{name}'")
            print("===============")
            cur.execute(qry1_ny, [name])
            for names in cur.fetchall():
                name, birth_year, death_year = names
                if death_year is None and  birth_year is not None:
                    print(f"{name} ({birth_year}-)")
                if death_year is None and  birth_year is None:
                    print(f"{name} (???)")
                if death_year is not None and  birth_year is not None:
                    print(f"{name} ({birth_year}-{death_year})")
                if death_year is not None and  birth_year is None:
                    print(f"{name} (-{death_year})")
        if yearw != 0:
            print(f"Names matching '{name}'")
            print("===============")
            cur.execute(qry1_y, [name,yearw])
            for names in cur.fetchall():
                name, birth_year, death_year = names
                if death_year is None and  birth_year is not None:
                    print(f"{name} ({birth_year}-)")
                if death_year is None and  birth_year is None:
                    print(f"{name} (???)")
                if death_year is not None and  birth_year is not None:
                    print(f"{name} ({birth_year}-{death_year})")
                if death_year is not None and  birth_year is None:
                    print(f"{name} (-{death_year})")
except psycopg2.Error as err:
  print("DB error: ", err)
finally:
  if db:
    db.close()



# queries
#
# # non partial name without year
# #acting
# select n.name, m.title, m.start_year, ar.played from names n
# join principals p on (n.id = p.name_id)
# join movies m on (m.id = p.movie_id)
# join acting_roles ar on (m.id = ar.movie_id and n.id = ar.name_id)
# where n.name ~* 'spike lee'
# order by m.start_year, m.title, p.ordering, ar.played;
#
# #crew
# select n.name, m.title, m.start_year, cr.role from names n
# join principals p on (n.id = p.name_id)
# join movies m on (m.id = p.movie_id)
# join crew_roles cr on (m.id = cr.movie_id and n.id = cr.name_id)
# where n.name ~* 'spike lee'
# order by m.start_year, m.title, p.ordering, cr.role;



# select * from Q4_pt1 where name ~* 'Spike Lee' order by start_year, title, ordering, role_played;
